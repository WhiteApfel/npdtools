from typing import Union
from httpx._models import Response
from datetime import datetime
from npdtools.types import Services, Client, Service


class CancellationInfo:
	def __init__(self, data: dict):
		self.operation_time_str: str = data.get('operationTime', None)
		self.operation_time = datetime.strptime(self.operation_time_str, '%Y-%m-%dT%H:%M:%S%z')
		self.comment = data.get('comment', None)
		self.raw = data


class IncomeInfo:
	"""
	–û–±—ä–µ–∫—Ç "—á–µ–∫–∞". –û–Ω —Å—Ç—Ä–∞—à–Ω–µ–Ω—å–∫–∏–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –§–ù–° –Ω–µ –º–æ–≥—ë—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏.

	**–ê—Ç—Ä–∏–±—É—Ç—ã**

	:param id: ID/–Ω–æ–º–µ—Ä —á–µ–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, 201cc5uzeg
	:type id: ``str``
	:param name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫–∞ (–æ–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏)
	:type name: ``str``
	:param operation_time: –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
	:type operation_time: ``datetime`` or ``None``
	:param request_time: –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –∫ API (—Ö–∑, –∫–∞–∫ –µ—â—ë –æ–±—ä—è—Å–Ω–∏—Ç—å)
	:type request_time: ``datetime`` or ``None``
	:param total_amount: –ò—Ç–æ–≥. –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ–∫–∞
	:type total_amount: ``float``
	:param client: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ, –±—É–¥—å —Ç–æ –§–õ, –ò–ü –∏–ª–∏ –ø—Ä–æ—á–∞—è –µ—Ä–µ—Å—å.
	:type client: Client or ``None``
	:param services: –û–±—ä–µ–∫—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —á–µ–∫–∞
	:type services: Services or ``None``
	:param cancellation_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ –¥—ã—Ä–æ—á–∫–∞ –æ—Ç –±—É–±–ª–∏–∫–∞
	:type cancellation_info: CancellationInfo or ``None``
	:param raw: –ß–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –§–ù–°. –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–¥–µ–ª—å–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Ç—É—Ç (TODO: —Å–¥–µ–ª–∞–π —Å—Å—ã–ª–∫—É)
	:type raw: ``dict``

	"""
	def __init__(self, response: Union[Response, dict] = None):
		# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ —á–µ–º—É-—Ç–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–º—É
		data: dict = response.json() if type(response) is Response else response if response else dict()
		data: dict = data if len(data) > 1 and "IncomeInfo" not in data else data["incomeInfo"]

		# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å üéâ
		self.id: str = data.get('approvedReceiptUuid', None)
		self.name: str = data.get('name', None)
		self.total_amount: Union[int, float] = data.get('totalAmount', None)

		# –ò–≥—Ä–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏
		if data.get('operationTime', None):
			self.operation_time: datetime = datetime.strptime(data.get('operationTime', None), '%Y-%m-%dT%H:%M:%S%z')
		if data.get('requestTime', None):
			self.request_time: datetime = datetime.strptime(data.get('requestTime', None), '%Y-%m-%dT%H:%M:%S%z')

		# –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
		self.client: dict = data.get('client', None)
		if self.client:
			self.client = Client(self.client)
		if "clientDisplayName" in data:
			self.client = Client(display_name=data.get('clientDisplayName', None), inn=data.get('clientInn'), )

		# –°–ø–∏—Å–æ—á–µ–∫ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
		self.services = data.get("services", Services())
		if len(self.services):
			self.services = Services([Service(wa['name'], wa['amount'], wa['quantity']) for wa in self.services])

		# –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
		self.cancellation_info = None
		if data.get("cancellationInfo", None):
			self.cancellation_info: CancellationInfo = CancellationInfo(data["cancellationInfo"])

		self.raw = data

	def __repr__(self):
		is_cancel = "Cancel income" if self.cancellation_info else "Income"
		return f"<{is_cancel} #{self.id} ({self.total_amount} rub.) at {self.operation_time.isoformat()}>"

	def __str__(self):
		return self.__repr__()


